<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QModInstaller</name>
    </assembly>
    <members>
        <member name="T:QModManager.API.IQMod">
            <summary>
            All public data about a QMod.
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.Id">
            <summary>
            The ID of the mod <para/>
            Can only contain alphanumeric characters and underscores: (<see langword="a-z"/>, <see langword="A-Z"/>, <see langword="0-9"/>, <see langword="_"/>)
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.DisplayName">
            <summary>
            The display name of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.Author">
            <summary>
            The author of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.SupportedGame">
            <summary>
            The game this mod was developed for.
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.RequiredMods">
            <summary>
            The dependencies of the mod and their optional minimum required version
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.ModsToLoadBefore">
            <summary>
            A list of mods, before which, this mod will load
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.ModsToLoadAfter">
            <summary>
            A list of mods, after which, this mod will load
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.LoadedAssembly">
            <summary>
            The assembly of this mod <para/>
            Check if <see langword="null"/> before using
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.AssemblyName">
            <summary>
            The assembly name of the mod
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.ParsedVersion">
            <summary>
            The version of the mod.
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.Enable">
            <summary>
            Whether or not this mod is enabled
            </summary>
        </member>
        <member name="P:QModManager.API.IQMod.IsLoaded">
            <summary>
            Whether or not this mod has been loaded
            </summary>
        </member>
        <member name="T:QModManager.API.IQModAPI">
            <summary>
            An set of services provided by QModManager for mods to use.
            </summary>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetAllMods">
            <summary>
            Gets a list all mods being tracked by QModManager.
            </summary>
            <returns>A read only list of mods containing all of the loaded mods</returns>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.IQModAPI.GetMod(System.String)">
            <summary>
            Finds a specific mod by its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns>The <see cref="T:QModManager.API.IQMod"/> instance of the mod if found; otherwise returns <c>null</c>.</returns>
        </member>
        <member name="M:QModManager.API.IQModAPI.ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns><c>True</c> if the mod is in the collection of mods to load; Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:QModManager.API.IQModServices">
            <summary>
            An set of services provided by QModManager for mods to use.
            </summary>
        </member>
        <member name="M:QModManager.API.IQModServices.FindModById(System.String)">
            <summary>
            Finds a specific mod by its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="modId">The mod ID.</param>
            <returns>The <see cref="T:QModManager.API.IQMod"/> instance of the mod if found; otherwise returns <c>null</c>.</returns>
        </member>
        <member name="M:QModManager.API.IQModServices.FindModByAssembly(System.Reflection.Assembly)">
            <summary>
            Finds a specific mod with a <see cref="P:QModManager.API.IQMod.LoadedAssembly"/> that matches the provided one.
            </summary>
            <param name="modAssembly">The mod assembly.</param>
            <returns>The <see cref="T:QModManager.API.IQMod"/> instance of the mod if found; otherwise returns <c>null</c>.</returns>
        </member>
        <member name="M:QModManager.API.IQModServices.AddCriticalMessage(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a critical message to the main menu.
            Message will stay in the main menu and on the loading screen.
            </summary>
            <param name="msg">The message to add.</param>
            <param name="size">The size of the text.</param>
            <param name="color">The color of the text.</param>
            <param name="autoformat">Whether or not to apply formatting tags to the message, or show it as it is.</param>
        </member>
        <member name="T:QModManager.API.ModLoading.QModCoreAttribute">
            <summary>
            Identifies the patching class for your QMod.
            </summary>
            <seealso cref="T:QModManager.API.ModLoading.QModPatch"/>
            <seealso cref="T:QModManager.API.ModLoading.QModPrePatch"/>
            <seealso cref="T:QModManager.API.ModLoading.QModPostPatch"/>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModCoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModCoreAttribute" /> class.
            </summary>
        </member>
        <member name="T:QModManager.API.ModLoading.QModPatch">
            <summary>
            Identifies a normal patch method for a QMod.<para/>
            This method must be public, must take no parameters, and must return <seealso cref="T:System.Void"/>.<para/>
            ALERT: The class that defines this method must have a <seealso cref="T:QModManager.API.ModLoading.QModCoreAttribute"/> attribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModPatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPatch"/> class for normal patching.        
            </summary>
        </member>
        <member name="T:QModManager.API.ModLoading.QModPostPatch">
            <summary>
            Identifies a post-patch method for a QMod.<para/>
            This method must be public, must take no parameters, and must return <seealso cref="T:System.Void"/>.<para/>
            ALERT: The class that defines this method must have a <seealso cref="T:QModManager.API.ModLoading.QModCoreAttribute"/> attribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModPostPatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPostPatch"/> class.
            </summary>
        </member>
        <member name="M:QModManager.API.ModLoading.QModPostPatch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPostPatch" /> class.<para/>
            Should only be used for mods that need to load last, after all other mods. Read the documentation for instructions.
            </summary>
            <param name="secretPassword">Should only be used for mods that need to load last, after all other mods. Read the documentation for instructions.</param>
        </member>
        <member name="T:QModManager.API.ModLoading.QModPrePatch">
            <summary>
            Identifies a pre-patch method for a QMod.<para/>
            This method must be public, must take no parameters, and must return <seealso cref="T:System.Void"/><para/>
            ALERT: The class that defines this method must have a <seealso cref="T:QModManager.API.ModLoading.QModCoreAttribute"/> attribute.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.ModLoading.QModPrePatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPrePatch"/> class.
            </summary>
        </member>
        <member name="M:QModManager.API.ModLoading.QModPrePatch.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.ModLoading.QModPrePatch"/> class.<para/>
            Should only be used for mods that need to load first, before all other mods. Read the documentation for instructions.
            </summary>
            <param name="secretPassword">Should only be used for mods that need to load first, before all other mods. Read the documentation for instructions.</param>
        </member>
        <member name="T:QModManager.API.QModAPI">
            <summary>
            Minimal legacy support only.
            </summary>
            <seealso cref="T:QModManager.API.IQModAPI" />
        </member>
        <member name="P:QModManager.API.QModAPI.Main">
            <summary>
            Minimal legacy support only.
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.GetAllMods">
            <summary>
            Gets a list all mods being tracked by QModManager.
            </summary>
            <returns>A read only list of mods containing all of the loaded mods</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly"/>
            </summary>
            <param name="modAssembly"></param>
        </member>
        <member name="M:QModManager.API.QModAPI.GetMod(System.String)">
            <summary>
            Finds a specific mod by its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns>The <see cref="T:QModManager.API.IQMod"/> instance of the mod if found; otherwise returns <c>null</c>.</returns>
        </member>
        <member name="M:QModManager.API.QModAPI.ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its unique <see cref="P:QModManager.API.IQMod.Id"/> value.
            </summary>
            <param name="id">The mod ID.</param>
            <returns><c>True</c> if the mod is in the collection of mods to load; Otherwise <c>false</c>.</returns>
        </member>
        <member name="T:QModManager.API.QModServices">
            <summary>
            Services offered to mods.
            </summary>
            <seealso cref="T:QModManager.API.IQModServices" />
        </member>
        <member name="P:QModManager.API.QModServices.Main">
            <summary>
            Gets the main entry point into the QMod Services.
            </summary>
            <value>
            The main.
            </value>
        </member>
        <member name="M:QModManager.API.QModServices.FindModById(System.String)">
            <summary>
            Finds the mod by identifier.
            </summary>
            <param name="modId">The mod identifier.</param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.QModServices.ModPresent(System.String)">
            <summary>
            Checks whether or not a mod is present based on its ID.
            </summary>
            <param name="modId">The mod ID.</param>
            <returns>
              <c>True</c> if the mod is in the collection of mods to load; Otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:QModManager.API.QModServices.FindModByAssembly(System.Reflection.Assembly)">
            <summary>
            Finds the mod by assembly.
            </summary>
            <param name="modAssembly">The mod assembly.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:QModManager.API.QModServices.GetAllMods">
            <summary>
            Gets a list all mods being tracked by QModManager.
            </summary>
            <returns>
            A read only list of mods containing all of the loaded mods
            </returns>
        </member>
        <member name="M:QModManager.API.QModServices.GetMyMod">
            <summary>
            Returns the mod from the assembly which called this method
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:QModManager.API.QModServices.GetMod(System.Reflection.Assembly)">
            <summary>
            Returns a mod from an <see cref="T:System.Reflection.Assembly" />
            </summary>
            <param name="modAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.QModServices.GetMod(System.String)">
            <summary>
            Returns a mod from an ID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:QModManager.API.QModServices.AddCriticalMessage(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a critical message to the main menu.
            Message will stay in the main menu and on the loading screen.
            </summary>
            <param name="msg">The message to add.</param>
            <param name="size">The size of the text.</param>
            <param name="color">The color of the text.</param>
            <param name="autoformat">Whether or not to apply formatting tags to the message, or show it as it is.</param>
        </member>
        <member name="T:QModManager.API.RequiredQMod">
            <summary>
            Identifies a required mod and an optional minimum version.
            </summary>
        </member>
        <member name="P:QModManager.API.RequiredQMod.Id">
            <summary>
            Gets the required mod's ID.
            </summary>
        </member>
        <member name="P:QModManager.API.RequiredQMod.RequiresMinimumVersion">
            <summary>
            Gets a value indicating whether the mod must be at a minimum version for compatibility.
            </summary>
        </member>
        <member name="P:QModManager.API.RequiredQMod.MinimumVersion">
            <summary>
            Gets the minimum version this mod should be at.<para/>
            If <see cref="P:QModManager.API.RequiredQMod.RequiresMinimumVersion"/> is <c>false</c>, this will return a default value.
            </summary>
        </member>
        <member name="T:QModManager.API.QModGame">
            <summary>
            Identifies the Subnautica games.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.None">
            <summary>
            No game.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.Subnautica">
            <summary>
            Subnautica.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.BelowZero">
            <summary>
            Subnautica: Below Zero.
            </summary>
        </member>
        <member name="F:QModManager.API.QModGame.Both">
            <summary>
            Both Subnautica and Below Zero.
            </summary>
        </member>
        <member name="T:QModManager.API.QModPatchAttributeBase">
            <summary>
            Base class to all attributes that identify QMod patch methods.
            </summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="M:QModManager.API.QModPatchAttributeBase.#ctor(QModManager.Patching.PatchingOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.QModPatchAttributeBase"/> class.
            </summary>
            <param name="patchOrder">The patch order.</param>
        </member>
        <member name="M:QModManager.API.QModPatchAttributeBase.#ctor(QModManager.Patching.PatchingOrder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:QModManager.API.QModPatchAttributeBase" /> class.
            </summary>
            <param name="patchOrder">The patch order.</param>
            <param name="secretPasword">The secret pasword.</param>
            <exception cref="T:QModManager.Patching.FatalPatchingException">This modder has not read the documentation and should not be using prepatch/postpatch functions.</exception>
        </member>
        <member name="M:QModManager.API.QModPatchAttributeBase.ValidateSecretPassword(System.Reflection.MethodInfo,QModManager.Patching.QMod)">
            <summary>
            Validates the that modder has read the documentation.
            </summary>
            <param name="method">The method.</param>
            <param name="mod">The mod.</param>
            <exception cref="T:QModManager.Patching.FatalPatchingException">This modder has not read the documentation and should not be using prepatch/postpatch functions.</exception>
        </member>
        <member name="M:QModManager.Patching.IQModFactory.BuildModLoadingList(System.String)">
            <summary>
            Searches through all folders in the provided directory and returns an ordered list of mods to load.<para/>
            Mods that cannot be loaded will have an unsuccessful <see cref="P:QModManager.Patching.QMod.Status"/> value.
            </summary>
            <param name="qmodsDirectory">The QMods directory</param>
            <returns>A new, sorted <see cref="T:System.Collections.Generic.List`1"/> ready to be initialized or skipped.</returns>
        </member>
        <member name="T:QModManager.Patching.IQModSerialiable">
            <summary>
            Enforces the requirements of the mod.json file for legacy mod loading.
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.PreInitialize">
            <summary>
            For pre-initialize patch methods
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.NormalInitialize">
            <summary>
            For normal patch methods
            </summary>
        </member>
        <member name="F:QModManager.Patching.PatchingOrder.PostInitialize">
            <summary>
            For post-initialize patch methods
            </summary>
        </member>
        <member name="M:QModManager.Patching.QModFactory.BuildModLoadingList(System.String)">
            <summary>
            Searches through all folders in the provided directory and returns an ordered list of mods to load.<para/>
            Mods that cannot be loaded will have an unsuccessful <see cref="P:QModManager.Patching.QMod.Status"/> value.
            </summary>
            <param name="qmodsDirectory">The QMods directory</param>
            <returns>A new, sorted <see cref="T:System.Collections.Generic.List`1"/> ready to be initialized or skipped.</returns>
        </member>
        <member name="P:QModManager.Patching.QModPlaceholder.QModManager">
            <summary>
            The dummy <see cref="T:QModManager.Patching.QMod"/> which is used to represent QModManager
            </summary>
        </member>
        <member name="T:QModManager.DataStructures.ISortable`1">
            <summary>
            Requirements to function within the <seealso cref="T:QModManager.DataStructures.SortedCollection`2"/>
            </summary>
            <typeparam name="IdType">The ID type.</typeparam>
        </member>
        <member name="T:QModManager.HarmonyPatches.FixSignsLoading.uGUI_SignInput_UpdateScale_Patch">
            <summary>
            Will fix the signs loading bug (see https://youtu.be/8eGj40Xzkag).
            This bug happens in vanilla version of the game (no mods installed).
            Note that the initial exceptions will still be raised upon loading (and logged in Player.log file).
            That's because this fix is applied as a postfix method (in other words, signs are fixed after their initial loading failure).
            A benefit from this is that it does not prevent modders from applying further modifications to the <see cref="M:uGUI_SignInput.UpdateScale"/> method.
            Also note that if something crash in there that probably means Unknown World fixed the issue (because it has been reported to them). If that's the case this entire file can be safely removed from QModManager project.
            </summary>
        </member>
        <member name="M:QModManager.HarmonyPatches.FixSignsLoading.uGUI_SignInput_UpdateScale_Patch.Postfix(uGUI_SignInput)">
            <summary>
            This function is patched into the game using Harmony.
            </summary>
            <param name="__instance">The <see cref="T:uGUI_SignInput"/> instance that owns the method.</param>
        </member>
        <member name="M:QModManager.HarmonyPatches.FixSignsLoading.uGUI_SignInput_UpdateScale_Patch.ApplyFix">
            <summary>
            Only apply this patch if game is any CS version for Below Zero or below version 65271 for Subnautica.
            </summary>
            <returns>Returns true if this patch needs to be applied, false otherwise.</returns>
        </member>
        <member name="T:QModManager.HarmonyPatches.FixSignsLoading.SignFixerComponent">
            <summary>
            MonoBehaviour component attached to sign objects to fix their loading problem (see https://youtu.be/8eGj40Xzkag).
            </summary>
        </member>
        <member name="M:QModManager.HarmonyPatches.FixSignsLoading.SignFixerComponent.RestoreSignState">
            <summary>
            This function gets called by <see cref="M:QModManager.HarmonyPatches.FixSignsLoading.SignFixerComponent.Awake"/> method.
            </summary>
        </member>
        <member name="M:QModManager.HarmonyPatches.FixSignsLoading.SignFixerComponent.Awake">
            <summary>
            This function gets called once the MonoBehaviour wakes up.
            </summary>
        </member>
        <member name="T:QModManager.Utility.MainMenuMessages">
            <summary>
            Allows to add critical messages to the main menu.
            Messages will stay in the main menu and on loading screen.
            </summary>
        </member>
        <member name="M:QModManager.Utility.MainMenuMessages.Add(System.String,System.String,System.Int32,System.String,System.Boolean)">
            <summary>Adds an error message to the main menu.</summary>
            <param name="msg">The message to add.</param>
            <param name="callerID">The ID of the caller (or null for "QModManager").</param>
            <param name="size">The size of the text.</param>
            <param name="color">The color of the text.</param>
            <param name="autoformat">Whether or not to apply formatting tags to the message, or show it as it is.</param>
        </member>
        <member name="T:QModManager.Utility.Logger">
            <summary>A simple logging class. Can be used for basic logging or to know which logging level is enabled.</summary>
        </member>
        <member name="T:QModManager.Utility.Logger.Level">
            <summary>Possible logging levels.</summary>
        </member>
        <member name="F:QModManager.Utility.Logger.Level.Debug">
            <summary>Debugging log level</summary>
        </member>
        <member name="F:QModManager.Utility.Logger.Level.Info">
            <summary>Informational log level</summary>
        </member>
        <member name="F:QModManager.Utility.Logger.Level.Warn">
            <summary>Warning log level</summary>
        </member>
        <member name="F:QModManager.Utility.Logger.Level.Error">
            <summary>Error log level</summary>
        </member>
        <member name="F:QModManager.Utility.Logger.Level.Fatal">
            <summary>Fatal log level</summary>
        </member>
        <member name="P:QModManager.Utility.Logger.DebugLogsEnabled">
            <summary>Used to know if debug logging is enabled or not.</summary>
        </member>
        <member name="M:QModManager.Utility.Logger.Log(QModManager.Utility.Logger.Level,System.String,System.Exception,System.Boolean)">
            <summary>
            This function will log given message and/or exception. It can optionally show the message on screen.
            You need to provide a message and/or an exception (this function will do nothing if both are set to null).
            Warning: You can call this function from any mod but don't call it from QModManager (<see cref="M:QModManager.Utility.Logger.GetCallingAssemblyName"/> would fail).
            </summary>
            <param name="logLevel">The level of the log.</param>
            <param name="msg">Optional: The message that needs to be logged.</param>
            <param name="ex">Optional: The exception that needs to be logged.</param>
            <param name="showOnScreen">Optional: Whether to show the message on screen or not.</param>
        </member>
        <member name="T:QModInstaller.QModPatcher">
            <summary>
            Container class for the entry point
            </summary>
        </member>
        <member name="M:QModInstaller.QModPatcher.Patch">
            <summary>
            QModManager entry point
            </summary>
        </member>
    </members>
</doc>
